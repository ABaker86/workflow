#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Nsun.Domain.DataContent
{
    /// <summary>
    /// The query extension class for UserInfo.
    /// </summary>
    public static partial class UserInfoExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Nsun.Domain.DataContent.UserInfo GetByKey(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable
            , System.String userNo
            )
        {
            return queryable
                .Where(u => u.UserNo == userNo)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.UserNo"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userNo">UserNo to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByUserNo(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, System.String userNo)
        {
            return queryable.Where(u => u.UserNo == userNo);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.UserNo"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userNo">UserNo to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByUserNo(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, ContainmentOperator containmentOperator, System.String userNo)
        {
            if (userNo == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userNo", "Parameter 'userNo' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.UserNo.Contains(userNo));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.UserNo.StartsWith(userNo));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.UserNo.EndsWith(userNo));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.UserNo.Contains(userNo) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(u => u.UserNo != userNo);
                default:
                    return queryable.Where(u => u.UserNo == userNo);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.UserNo"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userNo">UserNo to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByUserNo(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, System.String userNo, params System.String[] additionalValues)
        {
            var userNoList = new List<System.String> { userNo };

            if (additionalValues != null)
                userNoList.AddRange(additionalValues);

            if (userNoList.Count == 1)
                return queryable.ByUserNo(userNoList[0]);

            return queryable.ByUserNo(userNoList);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.UserNo"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByUserNo(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(u => values.Contains(u.UserNo));
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.UserName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userName">UserName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByUserName(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, System.String userName)
        {
            // support nulls
            return userName == null 
                ? queryable.Where(u => u.UserName == null) 
                : queryable.Where(u => u.UserName == userName);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.UserName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userName">UserName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByUserName(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, ContainmentOperator containmentOperator, System.String userName)
        {
            if (userName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("userName", "Parameter 'userName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.UserName.Contains(userName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.UserName.StartsWith(userName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.UserName.EndsWith(userName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.UserName.Contains(userName) == false);
                case ContainmentOperator.NotEquals:
                    return userName == null 
                        ? queryable.Where(u => u.UserName != null) 
                        : queryable.Where(u => u.UserName != userName);
                default:
                    return userName == null 
                        ? queryable.Where(u => u.UserName == null) 
                        : queryable.Where(u => u.UserName == userName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.UserName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userName">UserName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByUserName(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, System.String userName, params System.String[] additionalValues)
        {
            var userNameList = new List<System.String> { userName };

            if (additionalValues != null)
                userNameList.AddRange(additionalValues);
            else
                userNameList.Add(null);

            if (userNameList.Count == 1)
                return queryable.ByUserName(userNameList[0]);

            return queryable.ByUserName(userNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.UserName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByUserName(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Nsun.Domain.DataContent.UserInfo, bool>("UserName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.Password"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="password">Password to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByPassword(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, System.String password)
        {
            // support nulls
            return password == null 
                ? queryable.Where(u => u.Password == null) 
                : queryable.Where(u => u.Password == password);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.Password"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="password">Password to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByPassword(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, ContainmentOperator containmentOperator, System.String password)
        {
            if (password == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("password", "Parameter 'password' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.Password.Contains(password));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.Password.StartsWith(password));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.Password.EndsWith(password));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.Password.Contains(password) == false);
                case ContainmentOperator.NotEquals:
                    return password == null 
                        ? queryable.Where(u => u.Password != null) 
                        : queryable.Where(u => u.Password != password);
                default:
                    return password == null 
                        ? queryable.Where(u => u.Password == null) 
                        : queryable.Where(u => u.Password == password);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.Password"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="password">Password to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByPassword(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, System.String password, params System.String[] additionalValues)
        {
            var passwordList = new List<System.String> { password };

            if (additionalValues != null)
                passwordList.AddRange(additionalValues);
            else
                passwordList.Add(null);

            if (passwordList.Count == 1)
                return queryable.ByPassword(passwordList[0]);

            return queryable.ByPassword(passwordList);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.Password"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByPassword(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Nsun.Domain.DataContent.UserInfo, bool>("Password", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.Gender"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="gender">Gender to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByGender(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, System.Boolean? gender)
        {
            // support nulls
            return gender == null 
                ? queryable.Where(u => u.Gender == null) 
                : queryable.Where(u => u.Gender == gender);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.Gender"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="gender">Gender to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByGender(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, ComparisonOperator comparisonOperator, System.Boolean? gender)
        {
            if (gender == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("gender", "Parameter 'gender' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean? type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return gender == null 
                        ? queryable.Where(u => u.Gender != null) 
                        : queryable.Where(u => u.Gender != gender);
                default:
                    return gender == null 
                        ? queryable.Where(u => u.Gender == null) 
                        : queryable.Where(u => u.Gender == gender);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.Gender"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="gender">Gender to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByGender(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, System.Boolean? gender, params System.Boolean?[] additionalValues)
        {
            var genderList = new List<System.Boolean?> { gender };

            if (additionalValues != null)
                genderList.AddRange(additionalValues);
            else
                genderList.Add(null);

            if (genderList.Count == 1)
                return queryable.ByGender(genderList[0]);

            return queryable.ByGender(genderList);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.Gender"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByGender(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, IEnumerable<System.Boolean?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Nsun.Domain.DataContent.UserInfo, bool>("Gender", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.Age"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="age">Age to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByAge(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, System.Int16? age)
        {
            // support nulls
            return age == null 
                ? queryable.Where(u => u.Age == null) 
                : queryable.Where(u => u.Age == age);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.Age"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="age">Age to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByAge(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, ComparisonOperator comparisonOperator, System.Int16? age)
        {
            if (age == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("age", "Parameter 'age' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(u => u.Age > age);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(u => u.Age >= age);
                case ComparisonOperator.LessThan:
                    return queryable.Where(u => u.Age < age);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(u => u.Age <= age);
                case ComparisonOperator.NotEquals:
                    return age == null 
                        ? queryable.Where(u => u.Age != null) 
                        : queryable.Where(u => u.Age != age);
                default:
                    return age == null 
                        ? queryable.Where(u => u.Age == null) 
                        : queryable.Where(u => u.Age == age);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.Age"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="age">Age to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByAge(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, System.Int16? age, params System.Int16?[] additionalValues)
        {
            var ageList = new List<System.Int16?> { age };

            if (additionalValues != null)
                ageList.AddRange(additionalValues);
            else
                ageList.Add(null);

            if (ageList.Count == 1)
                return queryable.ByAge(ageList[0]);

            return queryable.ByAge(ageList);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.Age"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByAge(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, IEnumerable<System.Int16?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Nsun.Domain.DataContent.UserInfo, bool>("Age", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.PhoneNum"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phoneNum">PhoneNum to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByPhoneNum(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, System.String phoneNum)
        {
            // support nulls
            return phoneNum == null 
                ? queryable.Where(u => u.PhoneNum == null) 
                : queryable.Where(u => u.PhoneNum == phoneNum);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.PhoneNum"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phoneNum">PhoneNum to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByPhoneNum(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, ContainmentOperator containmentOperator, System.String phoneNum)
        {
            if (phoneNum == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("phoneNum", "Parameter 'phoneNum' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.PhoneNum.Contains(phoneNum));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.PhoneNum.StartsWith(phoneNum));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.PhoneNum.EndsWith(phoneNum));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.PhoneNum.Contains(phoneNum) == false);
                case ContainmentOperator.NotEquals:
                    return phoneNum == null 
                        ? queryable.Where(u => u.PhoneNum != null) 
                        : queryable.Where(u => u.PhoneNum != phoneNum);
                default:
                    return phoneNum == null 
                        ? queryable.Where(u => u.PhoneNum == null) 
                        : queryable.Where(u => u.PhoneNum == phoneNum);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.PhoneNum"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="phoneNum">PhoneNum to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByPhoneNum(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, System.String phoneNum, params System.String[] additionalValues)
        {
            var phoneNumList = new List<System.String> { phoneNum };

            if (additionalValues != null)
                phoneNumList.AddRange(additionalValues);
            else
                phoneNumList.Add(null);

            if (phoneNumList.Count == 1)
                return queryable.ByPhoneNum(phoneNumList[0]);

            return queryable.ByPhoneNum(phoneNumList);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.PhoneNum"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByPhoneNum(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Nsun.Domain.DataContent.UserInfo, bool>("PhoneNum", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.Address"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address">Address to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByAddress(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, System.String address)
        {
            // support nulls
            return address == null 
                ? queryable.Where(u => u.Address == null) 
                : queryable.Where(u => u.Address == address);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.Address"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address">Address to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByAddress(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, ContainmentOperator containmentOperator, System.String address)
        {
            if (address == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("address", "Parameter 'address' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.Address.Contains(address));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.Address.StartsWith(address));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.Address.EndsWith(address));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.Address.Contains(address) == false);
                case ContainmentOperator.NotEquals:
                    return address == null 
                        ? queryable.Where(u => u.Address != null) 
                        : queryable.Where(u => u.Address != address);
                default:
                    return address == null 
                        ? queryable.Where(u => u.Address == null) 
                        : queryable.Where(u => u.Address == address);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.Address"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address">Address to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByAddress(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, System.String address, params System.String[] additionalValues)
        {
            var addressList = new List<System.String> { address };

            if (additionalValues != null)
                addressList.AddRange(additionalValues);
            else
                addressList.Add(null);

            if (addressList.Count == 1)
                return queryable.ByAddress(addressList[0]);

            return queryable.ByAddress(addressList);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.Address"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByAddress(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Nsun.Domain.DataContent.UserInfo, bool>("Address", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByEmail(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, System.String email)
        {
            // support nulls
            return email == null 
                ? queryable.Where(u => u.Email == null) 
                : queryable.Where(u => u.Email == email);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByEmail(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, ContainmentOperator containmentOperator, System.String email)
        {
            if (email == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("email", "Parameter 'email' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.Email.Contains(email));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.Email.StartsWith(email));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.Email.EndsWith(email));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.Email.Contains(email) == false);
                case ContainmentOperator.NotEquals:
                    return email == null 
                        ? queryable.Where(u => u.Email != null) 
                        : queryable.Where(u => u.Email != email);
                default:
                    return email == null 
                        ? queryable.Where(u => u.Email == null) 
                        : queryable.Where(u => u.Email == email);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByEmail(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, System.String email, params System.String[] additionalValues)
        {
            var emailList = new List<System.String> { email };

            if (additionalValues != null)
                emailList.AddRange(additionalValues);
            else
                emailList.Add(null);

            if (emailList.Count == 1)
                return queryable.ByEmail(emailList[0]);

            return queryable.ByEmail(emailList);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByEmail(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Nsun.Domain.DataContent.UserInfo, bool>("Email", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.LoginName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="loginName">LoginName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByLoginName(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, System.String loginName)
        {
            // support nulls
            return loginName == null 
                ? queryable.Where(u => u.LoginName == null) 
                : queryable.Where(u => u.LoginName == loginName);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.LoginName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="loginName">LoginName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByLoginName(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, ContainmentOperator containmentOperator, System.String loginName)
        {
            if (loginName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("loginName", "Parameter 'loginName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.LoginName.Contains(loginName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.LoginName.StartsWith(loginName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.LoginName.EndsWith(loginName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.LoginName.Contains(loginName) == false);
                case ContainmentOperator.NotEquals:
                    return loginName == null 
                        ? queryable.Where(u => u.LoginName != null) 
                        : queryable.Where(u => u.LoginName != loginName);
                default:
                    return loginName == null 
                        ? queryable.Where(u => u.LoginName == null) 
                        : queryable.Where(u => u.LoginName == loginName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.LoginName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="loginName">LoginName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByLoginName(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, System.String loginName, params System.String[] additionalValues)
        {
            var loginNameList = new List<System.String> { loginName };

            if (additionalValues != null)
                loginNameList.AddRange(additionalValues);
            else
                loginNameList.Add(null);

            if (loginNameList.Count == 1)
                return queryable.ByLoginName(loginNameList[0]);

            return queryable.ByLoginName(loginNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserInfo.LoginName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserInfo> ByLoginName(this IQueryable<Nsun.Domain.DataContent.UserInfo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Nsun.Domain.DataContent.UserInfo, bool>("LoginName", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}
#pragma warning restore 1591

