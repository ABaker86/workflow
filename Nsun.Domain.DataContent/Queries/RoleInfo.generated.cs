#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Nsun.Domain.DataContent
{
    /// <summary>
    /// The query extension class for RoleInfo.
    /// </summary>
    public static partial class RoleInfoExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Nsun.Domain.DataContent.RoleInfo GetByKey(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable
            , System.Int32 roleId
            )
        {
            return queryable
                .Where(r => r.RoleId == roleId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.RoleInfo.RoleId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleId">RoleId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.RoleInfo> ByRoleId(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable, System.Int32 roleId)
        {
            return queryable.Where(r => r.RoleId == roleId);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.RoleInfo.RoleId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleId">RoleId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.RoleInfo> ByRoleId(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable, ComparisonOperator comparisonOperator, System.Int32 roleId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(r => r.RoleId > roleId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(r => r.RoleId >= roleId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(r => r.RoleId < roleId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(r => r.RoleId <= roleId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(r => r.RoleId != roleId);
                default:
                    return queryable.Where(r => r.RoleId == roleId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.RoleInfo.RoleId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleId">RoleId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.RoleInfo> ByRoleId(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable, System.Int32 roleId, params System.Int32[] additionalValues)
        {
            var roleIdList = new List<System.Int32> { roleId };

            if (additionalValues != null)
                roleIdList.AddRange(additionalValues);

            if (roleIdList.Count == 1)
                return queryable.ByRoleId(roleIdList[0]);

            return queryable.ByRoleId(roleIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.RoleInfo.RoleId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.RoleInfo> ByRoleId(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(r => values.Contains(r.RoleId));
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.RoleInfo.RoleNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleNumber">RoleNumber to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.RoleInfo> ByRoleNumber(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable, System.String roleNumber)
        {
            // support nulls
            return roleNumber == null 
                ? queryable.Where(r => r.RoleNumber == null) 
                : queryable.Where(r => r.RoleNumber == roleNumber);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.RoleInfo.RoleNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleNumber">RoleNumber to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.RoleInfo> ByRoleNumber(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable, ContainmentOperator containmentOperator, System.String roleNumber)
        {
            if (roleNumber == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("roleNumber", "Parameter 'roleNumber' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(r => r.RoleNumber.Contains(roleNumber));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(r => r.RoleNumber.StartsWith(roleNumber));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(r => r.RoleNumber.EndsWith(roleNumber));
                case ContainmentOperator.NotContains:
                    return queryable.Where(r => r.RoleNumber.Contains(roleNumber) == false);
                case ContainmentOperator.NotEquals:
                    return roleNumber == null 
                        ? queryable.Where(r => r.RoleNumber != null) 
                        : queryable.Where(r => r.RoleNumber != roleNumber);
                default:
                    return roleNumber == null 
                        ? queryable.Where(r => r.RoleNumber == null) 
                        : queryable.Where(r => r.RoleNumber == roleNumber);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.RoleInfo.RoleNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleNumber">RoleNumber to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.RoleInfo> ByRoleNumber(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable, System.String roleNumber, params System.String[] additionalValues)
        {
            var roleNumberList = new List<System.String> { roleNumber };

            if (additionalValues != null)
                roleNumberList.AddRange(additionalValues);
            else
                roleNumberList.Add(null);

            if (roleNumberList.Count == 1)
                return queryable.ByRoleNumber(roleNumberList[0]);

            return queryable.ByRoleNumber(roleNumberList);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.RoleInfo.RoleNumber"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.RoleInfo> ByRoleNumber(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Nsun.Domain.DataContent.RoleInfo, bool>("RoleNumber", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.RoleInfo.RoleRemark"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleRemark">RoleRemark to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.RoleInfo> ByRoleRemark(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable, System.String roleRemark)
        {
            // support nulls
            return roleRemark == null 
                ? queryable.Where(r => r.RoleRemark == null) 
                : queryable.Where(r => r.RoleRemark == roleRemark);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.RoleInfo.RoleRemark"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleRemark">RoleRemark to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.RoleInfo> ByRoleRemark(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable, ContainmentOperator containmentOperator, System.String roleRemark)
        {
            if (roleRemark == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("roleRemark", "Parameter 'roleRemark' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(r => r.RoleRemark.Contains(roleRemark));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(r => r.RoleRemark.StartsWith(roleRemark));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(r => r.RoleRemark.EndsWith(roleRemark));
                case ContainmentOperator.NotContains:
                    return queryable.Where(r => r.RoleRemark.Contains(roleRemark) == false);
                case ContainmentOperator.NotEquals:
                    return roleRemark == null 
                        ? queryable.Where(r => r.RoleRemark != null) 
                        : queryable.Where(r => r.RoleRemark != roleRemark);
                default:
                    return roleRemark == null 
                        ? queryable.Where(r => r.RoleRemark == null) 
                        : queryable.Where(r => r.RoleRemark == roleRemark);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.RoleInfo.RoleRemark"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleRemark">RoleRemark to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.RoleInfo> ByRoleRemark(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable, System.String roleRemark, params System.String[] additionalValues)
        {
            var roleRemarkList = new List<System.String> { roleRemark };

            if (additionalValues != null)
                roleRemarkList.AddRange(additionalValues);
            else
                roleRemarkList.Add(null);

            if (roleRemarkList.Count == 1)
                return queryable.ByRoleRemark(roleRemarkList[0]);

            return queryable.ByRoleRemark(roleRemarkList);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.RoleInfo.RoleRemark"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.RoleInfo> ByRoleRemark(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Nsun.Domain.DataContent.RoleInfo, bool>("RoleRemark", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.RoleInfo.RoleType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleType">RoleType to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.RoleInfo> ByRoleType(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable, System.Int32? roleType)
        {
            // support nulls
            return roleType == null 
                ? queryable.Where(r => r.RoleType == null) 
                : queryable.Where(r => r.RoleType == roleType);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.RoleInfo.RoleType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleType">RoleType to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.RoleInfo> ByRoleType(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable, ComparisonOperator comparisonOperator, System.Int32? roleType)
        {
            if (roleType == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("roleType", "Parameter 'roleType' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(r => r.RoleType > roleType);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(r => r.RoleType >= roleType);
                case ComparisonOperator.LessThan:
                    return queryable.Where(r => r.RoleType < roleType);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(r => r.RoleType <= roleType);
                case ComparisonOperator.NotEquals:
                    return roleType == null 
                        ? queryable.Where(r => r.RoleType != null) 
                        : queryable.Where(r => r.RoleType != roleType);
                default:
                    return roleType == null 
                        ? queryable.Where(r => r.RoleType == null) 
                        : queryable.Where(r => r.RoleType == roleType);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.RoleInfo.RoleType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="roleType">RoleType to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.RoleInfo> ByRoleType(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable, System.Int32? roleType, params System.Int32?[] additionalValues)
        {
            var roleTypeList = new List<System.Int32?> { roleType };

            if (additionalValues != null)
                roleTypeList.AddRange(additionalValues);
            else
                roleTypeList.Add(null);

            if (roleTypeList.Count == 1)
                return queryable.ByRoleType(roleTypeList[0]);

            return queryable.ByRoleType(roleTypeList);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.RoleInfo.RoleType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.RoleInfo> ByRoleType(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Nsun.Domain.DataContent.RoleInfo, bool>("RoleType", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.RoleInfo.IsActive"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isActive">IsActive to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.RoleInfo> ByIsActive(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable, System.Boolean? isActive)
        {
            // support nulls
            return isActive == null 
                ? queryable.Where(r => r.IsActive == null) 
                : queryable.Where(r => r.IsActive == isActive);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.RoleInfo.IsActive"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isActive">IsActive to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.RoleInfo> ByIsActive(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable, ComparisonOperator comparisonOperator, System.Boolean? isActive)
        {
            if (isActive == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("isActive", "Parameter 'isActive' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Boolean? type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return isActive == null 
                        ? queryable.Where(r => r.IsActive != null) 
                        : queryable.Where(r => r.IsActive != isActive);
                default:
                    return isActive == null 
                        ? queryable.Where(r => r.IsActive == null) 
                        : queryable.Where(r => r.IsActive == isActive);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.RoleInfo.IsActive"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isActive">IsActive to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.RoleInfo> ByIsActive(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable, System.Boolean? isActive, params System.Boolean?[] additionalValues)
        {
            var isActiveList = new List<System.Boolean?> { isActive };

            if (additionalValues != null)
                isActiveList.AddRange(additionalValues);
            else
                isActiveList.Add(null);

            if (isActiveList.Count == 1)
                return queryable.ByIsActive(isActiveList[0]);

            return queryable.ByIsActive(isActiveList);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.RoleInfo.IsActive"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.RoleInfo> ByIsActive(this IQueryable<Nsun.Domain.DataContent.RoleInfo> queryable, IEnumerable<System.Boolean?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<Nsun.Domain.DataContent.RoleInfo, bool>("IsActive", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}
#pragma warning restore 1591

