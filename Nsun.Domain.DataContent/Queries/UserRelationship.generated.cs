#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace Nsun.Domain.DataContent
{
    /// <summary>
    /// The query extension class for UserRelationship.
    /// </summary>
    public static partial class UserRelationshipExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static Nsun.Domain.DataContent.UserRelationship GetByKey(this IQueryable<Nsun.Domain.DataContent.UserRelationship> queryable
            , System.Int32 autoId
            )
        {
            return queryable
                .Where(u => u.AutoId == autoId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserRelationship.AutoId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="autoId">AutoId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserRelationship> ByAutoId(this IQueryable<Nsun.Domain.DataContent.UserRelationship> queryable, System.Int32 autoId)
        {
            return queryable.Where(u => u.AutoId == autoId);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserRelationship.AutoId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="autoId">AutoId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserRelationship> ByAutoId(this IQueryable<Nsun.Domain.DataContent.UserRelationship> queryable, ComparisonOperator comparisonOperator, System.Int32 autoId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(u => u.AutoId > autoId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(u => u.AutoId >= autoId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(u => u.AutoId < autoId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(u => u.AutoId <= autoId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(u => u.AutoId != autoId);
                default:
                    return queryable.Where(u => u.AutoId == autoId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserRelationship.AutoId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="autoId">AutoId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserRelationship> ByAutoId(this IQueryable<Nsun.Domain.DataContent.UserRelationship> queryable, System.Int32 autoId, params System.Int32[] additionalValues)
        {
            var autoIdList = new List<System.Int32> { autoId };

            if (additionalValues != null)
                autoIdList.AddRange(additionalValues);

            if (autoIdList.Count == 1)
                return queryable.ByAutoId(autoIdList[0]);

            return queryable.ByAutoId(autoIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserRelationship.AutoId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserRelationship> ByAutoId(this IQueryable<Nsun.Domain.DataContent.UserRelationship> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(u => values.Contains(u.AutoId));
        }
    
        #endregion
        
        #region By Association
        
        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserRelationship by FriendNoUserInfo's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="friendNoUserInfo">FriendNoUserInfo to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserRelationship> ByFriendNoUserInfo(this IQueryable<Nsun.Domain.DataContent.UserRelationship> queryable, Nsun.Domain.DataContent.UserInfo friendNoUserInfo)
        {
            return queryable.ByFriendNoUserInfo(ComparisonOperator.Equals, friendNoUserInfo);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserRelationship by FriendNoUserInfo's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="friendNoUserInfo">FriendNoUserInfo to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserRelationship> ByFriendNoUserInfo(this IQueryable<Nsun.Domain.DataContent.UserRelationship> queryable, ComparisonOperator comparisonOperator, Nsun.Domain.DataContent.UserInfo friendNoUserInfo)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(u => u.FriendNoUserInfo == friendNoUserInfo);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(u => u.FriendNoUserInfo != friendNoUserInfo);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserRelationship by UserInfo's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userNo">UserNo to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserRelationship> ByFriendNoUserInfo(this IQueryable<Nsun.Domain.DataContent.UserRelationship> queryable, System.String userNo)
        {
            return queryable.ByFriendNoUserInfo(ComparisonOperator.Equals, userNo);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserRelationship by UserInfo's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="userNo">UserNo to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserRelationship> ByFriendNoUserInfo(this IQueryable<Nsun.Domain.DataContent.UserRelationship> queryable, ComparisonOperator comparisonOperator, System.String userNo)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(u => u.FriendNoUserInfo.UserNo == userNo);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(u => u.FriendNoUserInfo.UserNo != userNo);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserRelationship by UserNoUserInfo's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userNoUserInfo">UserNoUserInfo to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserRelationship> ByUserNoUserInfo(this IQueryable<Nsun.Domain.DataContent.UserRelationship> queryable, Nsun.Domain.DataContent.UserInfo userNoUserInfo)
        {
            return queryable.ByUserNoUserInfo(ComparisonOperator.Equals, userNoUserInfo);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserRelationship by UserNoUserInfo's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="userNoUserInfo">UserNoUserInfo to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserRelationship> ByUserNoUserInfo(this IQueryable<Nsun.Domain.DataContent.UserRelationship> queryable, ComparisonOperator comparisonOperator, Nsun.Domain.DataContent.UserInfo userNoUserInfo)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(u => u.UserNoUserInfo == userNoUserInfo);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(u => u.UserNoUserInfo != userNoUserInfo);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserRelationship by UserInfo's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="userNo">UserNo to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserRelationship> ByUserNoUserInfo(this IQueryable<Nsun.Domain.DataContent.UserRelationship> queryable, System.String userNo)
        {
            return queryable.ByUserNoUserInfo(ComparisonOperator.Equals, userNo);
        }
        
        /// <summary>
        /// Gets a query for <see cref="Nsun.Domain.DataContent.UserRelationship by UserInfo's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="userNo">UserNo to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<Nsun.Domain.DataContent.UserRelationship> ByUserNoUserInfo(this IQueryable<Nsun.Domain.DataContent.UserRelationship> queryable, ComparisonOperator comparisonOperator, System.String userNo)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(u => u.UserNoUserInfo.UserNo == userNo);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(u => u.UserNoUserInfo.UserNo != userNo);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        #endregion
    }
}
#pragma warning restore 1591

